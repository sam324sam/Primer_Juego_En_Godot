[gd_scene load_steps=15 format=3 uid="uid://it2eyb656bv0"]

[ext_resource type="Shader" path="res://Escenas/Shaders/espacio.gdshader" id="1_i1i4j"]
[ext_resource type="PackedScene" uid="uid://cmgkpvfauy1aw" path="res://Escenas/Ui.tscn" id="2_3q3bj"]
[ext_resource type="PackedScene" uid="uid://wpcqwttjo1c" path="res://Escenas/Jugador.tscn" id="3_gs1vg"]
[ext_resource type="AudioStream" uid="uid://bex8rel2s3c7y" path="res://Assets/Escenario/MusicaNivel1.wav" id="4_1a8vh"]
[ext_resource type="Script" path="res://Escenas/Scripts/Escenario/Nivel1.gd" id="5_qrapf"]

[sub_resource type="Shader" id="Shader_sm4nq"]
resource_local_to_scene = true
code = "shader_type sky;

// Comment this if you don't want to use star twinke. However, if you do want to keep it,
// I suggest you to set the sky process mode to High-Quality Incremental or Real-Time,
// as star twinkling may greatly impact performance.
#define USE_TWINKLE

group_uniforms sky;
uniform vec3 sky_color: source_color = vec3(0.03, 0.05, 0.11);

group_uniforms stars;
uniform vec3 star_base_color: source_color = vec3(0.8, 1.0, 0.3);
uniform float star_hue_offset: hint_range(0., 1.) = 0.6;
uniform float star_intensity: hint_range(0., 0.2) = 0.08;
#ifdef USE_TWINKLE
uniform float star_twinkle_speed: hint_range(0.0, 2.0) = 0.8;
uniform float star_twinkle_intensity: hint_range(0.0, 1.0) = 0.2;
#endif

group_uniforms layers;
uniform float layer_scale: hint_range(0., 60.) = 20.;
uniform float layer_scale_step: hint_range(0., 40.) = 10.;
uniform int layers_count: hint_range(0, 12) = 3;

// Hue credit:
// The MIT License
// Copyright © 2024 DigvijaysinhGohil
// https://github.com/DigvijaysinhGohil/Godot-Shader-Lib

vec3 hue(vec3 input, float offset, int range_index) {
	// RGB to HSV
	vec4 k = vec4(0., -1./3., 2./3., -1.);
	vec4 p = mix(vec4(input.bg, k.wz), vec4(input.gb, k.xy), step(input.b, input.g));
	vec4 q = mix(vec4(p.xyw, input.r), vec4(input.r, p.yzx), step(p.x, input.r));
	float d = q.x - min(q.w, q.y);
	float e = 1.e-10;
	vec3 hsv = vec3(abs(q.z + (q.w - q.y) / (6. * d + e)), d / (q.x + e), q.x);

	offset = (range_index == 0) ? offset / 360. : offset;
	float hue = hsv.x + offset;
	if (hue < 0.) {
		hsv.x = hue + 1.;
	} else if (hue > 1.) {
		hsv.x = hue - 1.;
	} else {
		hsv.x = hue;
	}

	// HSV to RGB
	vec4 k2 = vec4(1., 2./3., 1./3., 3.);
	vec3 p2 = abs(fract(hsv.xxx + k2.xyz) * 6. - k2.www);
	vec3 rgb = hsv.z * mix(k2.xxx, clamp(p2 - k2.xxx, 0., 1.), hsv.y);
	return rgb;
}

// Voronoi method credit:
// The MIT License
// Copyright © 2013 Inigo Quilez
// https://www.shadertoy.com/view/ldl3Dl

vec3 hash(vec3 x) {
	x = vec3(dot(x, vec3(127.1,311.7, 74.7)),
			 dot(x, vec3(269.5,183.3,246.1)),
			 dot(x, vec3(113.5,271.9,124.6)));
	return fract(sin(x) * 43758.5453123);
}

vec2 voronoi(in vec3 x){
	vec3 p = floor(x);
	vec3 f = fract(x);
	
	float res = 100.;
	float id = 0.;
	
	for (float k = -1.; k <= 1.; k += 1.) {
		for (float j = -1.; j <= 1.; j += 1.) {
			for (float i = -1.; i <= 1.; i += 1.) {
				vec3 b = vec3(i, j, k);
				vec3 r = vec3(b) - f + hash(p + b);
				float d = dot(r, r);
				if (d < res) {
					res = d;
					id = dot(p + b, vec3(0., 57., 113.));
				}
		    }
		}
	}
	
	return vec2(sqrt(res), id);
}

void sky() {
	COLOR = sky_color;
	
	for (int i = 0; i < layers_count; i++) {
		vec3 pos = EYEDIR * (layer_scale + float(i) * layer_scale_step);
		vec2 layer = voronoi(pos);
		
		vec3 rand = hash(vec3(layer.y));
		
		#ifdef USE_TWINKLE
			float twinkle = sin(TIME * PI * star_twinkle_speed + rand.x * TAU);
			twinkle *= star_twinkle_intensity;
			float star = smoothstep(star_intensity + star_intensity * twinkle, 0., layer.x);
		#else
			float star = smoothstep(star_intensity, 0., layer.x);
		#endif
		
		vec3 star_color = star * hue((COLOR + star_base_color), rand.y * star_hue_offset, 1);
		
		COLOR += star_color;
	}
}"

[sub_resource type="ShaderMaterial" id="ShaderMaterial_8rovt"]
shader = SubResource("Shader_sm4nq")
shader_parameter/sky_color = Color(0.03, 0.05, 0.11, 1)
shader_parameter/star_base_color = Color(0.8, 1, 0.3, 1)
shader_parameter/star_hue_offset = 0.6
shader_parameter/star_intensity = 0.08
shader_parameter/star_twinkle_speed = 0.8
shader_parameter/star_twinkle_intensity = 0.2
shader_parameter/layer_scale = 20.0
shader_parameter/layer_scale_step = 10.0
shader_parameter/layers_count = 3

[sub_resource type="GDScript" id="GDScript_v66tu"]
script/source = "extends Node2D

var intervalo_asteroide = true
var inicio = false
var spawnEnemigos = true
var planeta
var advertencia
var enemigo2
var asteroide
var viewport_rect
func precargarRecursos():
	planeta = [
		preload(\"res://Escenas/Planeta1.tscn\"),
		preload(\"res://Escenas/Planeta2.tscn\"),
		preload(\"res://Escenas/Planeta3.tscn\"),
		preload(\"res://Escenas/Planeta4.tscn\")
	]
			
func _ready():
	viewport_rect = get_viewport_rect()
	precargarRecursos()
	Global.escenario = \"/root/Espacio/Ui\"
	await get_tree().create_timer(0.1).timeout
	generarPlanetas()
	await get_tree().create_timer(4).timeout
	generar_enemigo2()
	generar_PowerUp()
	generar_asteroide()
	await get_tree().create_timer(1).timeout
	generarFilaEnemigos()
	await get_tree().create_timer(1).timeout
	jefeFondo()
	await get_tree().create_timer(1).timeout
	aparecerJefe()

func jefeFondo():
	var jefeAlFondo = preload(\"res://Escenas/Enemigos/jefeFondo1.tscn\").instantiate()
	jefeAlFondo.position.y = viewport_rect.size.y
	var min_x = viewport_rect.position.x
	var max_x = viewport_rect.size.x
	var random_x = randf_range(min_x, max_x)
	jefeAlFondo.position.x = random_x
	get_parent().add_child(jefeAlFondo)

var intervalo_enemigo2 = true
func generar_enemigo2():
	while spawnEnemigos:
		advertencia = preload(\"res://Escenas/Advertencia.tscn\").instantiate()
		enemigo2 = preload(\"res://Escenas/Enemigos/Enemigo2.tscn\").instantiate()
		await get_tree().create_timer(5).timeout
		if intervalo_enemigo2:
			var min_x = viewport_rect.position.x
			var max_x = viewport_rect.size.x
			var random_x = randf_range(min_x + 200, max_x - 200)
			var min_y = viewport_rect.position.y
			var max_y = viewport_rect.size.y
			var random_y = randf_range(min_y + 200, max_y - 200)
			advertencia.position.x = random_x
			advertencia.position.y = random_y
			enemigo2.position.x = random_x
			enemigo2.position.y = random_y
			get_parent().add_child(advertencia)
			await get_tree().create_timer(3).timeout
			get_parent().add_child(enemigo2)
			intervalo_enemigo2 = false
			await get_tree().create_timer(10).timeout
			intervalo_enemigo2 = true

func generar_asteroide():
	while true:
		if intervalo_asteroide:
			asteroide = preload(\"res://Escenas/asteroide.tscn\").instantiate()
			var min_x = viewport_rect.position.x
			var max_x = viewport_rect.size.x
			var random_x = randf_range(min_x, max_x)
			asteroide.position.x = random_x
			asteroide.position.y = -40
			asteroide.rotation = randf_range(0, PI * 2)
			get_parent().add_child(asteroide)
			intervalo_asteroide = false
			await get_tree().create_timer(0.5).timeout #Tiempo de s pawn entre asteroides
			intervalo_asteroide = true

func _on_timer_timeout(body):
	if body:
		body.queue_free()  # Eliminar escena despues del contador
		
var intervalo_power_up = true
func generar_PowerUp():
	while true:
		if intervalo_power_up:
			var random_number = randi() % 4
			var power_up
			if random_number == 0:
				power_up = preload(\"res://Escenas/PorVelocidad.tscn\").instantiate()
			elif  random_number == 1:
				power_up = preload(\"res://Escenas/HeavyMachingun.tscn\").instantiate()
			elif  random_number == 2:
				power_up = preload(\"res://Escenas/PorVelocidad.tscn\").instantiate()
			elif  random_number == 3:
				power_up = preload(\"res://Escenas/HeavyMachingun.tscn\").instantiate()
			var min_x = viewport_rect.position.x
			var max_x = viewport_rect.size.x
			var random_x = randf_range(min_x + 200, max_x - 200)
			var min_y = viewport_rect.position.y
			var max_y = viewport_rect.size.y
			var random_y = randf_range(min_y + 200, max_y - 200)
			power_up.position.x = random_x
			power_up.position.y = random_y
			add_child(power_up)
			intervalo_power_up = false
			await get_tree().create_timer(20).timeout
			intervalo_power_up = true

var intervalo_planeta = true
func generarPlanetas():
	while true:
		if intervalo_planeta:
			var nr = randi() % planeta.size()  # randi() devuelve un número entero aleatorio
			var auxiliar = planeta[nr].instantiate()
			var min_x = viewport_rect.position.x
			var max_x = viewport_rect.size.x
			var random_x = randf_range(min_x, max_x)
			auxiliar.position.x = random_x
			auxiliar.position.y = -300
			intervalo_planeta = false
			get_parent().add_child(auxiliar)
			print(\"Planeta\")
			await get_tree().create_timer(40).timeout
			intervalo_planeta = true

var intervalo_enemigos = true
func generarFilaEnemigos():
	while spawnEnemigos:
		if intervalo_enemigos:
			var enemigo = preload(\"res://Escenas/OrganizacionEnemigos/FilaEnemigos1.tscn\").instantiate()
			var min_x = viewport_rect.position.x
			var max_x = viewport_rect.size.x
			var random_x = randf_range(min_x + 250, max_x - 250)
			enemigo.position.x = random_x
			get_parent().add_child(enemigo)
			intervalo_enemigos = false
			await get_tree().create_timer(20).timeout
			intervalo_enemigos = true

func aparecerJefe():
	var auxiliar = true
	var jefe = preload(\"res://Escenas/Enemigos/Jefe1.tscn\").instantiate()
	jefe.position = Vector2(viewport_rect.size.x/2+10,-400)
	var advertencia = preload(\"res://Escenas/Enemigos/adevertenciaJefe.tscn\").instantiate()
	advertencia.position = Vector2(viewport_rect.size.x/2+10,50)
	get_parent().add_child(advertencia)
	spawnEnemigos = false
	await get_tree().create_timer(3).timeout
	get_parent().add_child(jefe)
	$Ui/vidaJefe.visible = 1
	$Ui/nombreJefe.visible = 1
	$Ui/nombreJefe.text = \"Jefe 1 \"
"

[sub_resource type="PhysicsMaterial" id="PhysicsMaterial_8crpi"]

[sub_resource type="SegmentShape2D" id="SegmentShape2D_7piqt"]
a = Vector2(1920, 21)
b = Vector2(5, 22)

[sub_resource type="SegmentShape2D" id="SegmentShape2D_ttjyk"]
a = Vector2(14, 17)
b = Vector2(13, 1096)

[sub_resource type="SegmentShape2D" id="SegmentShape2D_xaa5u"]
b = Vector2(1922, 0)

[sub_resource type="SegmentShape2D" id="SegmentShape2D_epiip"]
b = Vector2(0, 1083)

[sub_resource type="ShaderMaterial" id="ShaderMaterial_6opc8"]
shader = ExtResource("1_i1i4j")
shader_parameter/dimensions = Vector2(1024, 600)
shader_parameter/small_stars = 100.0
shader_parameter/small_stars_far_size = 0.4
shader_parameter/small_stars_near_size = 0.8
shader_parameter/large_stars = 8.0
shader_parameter/large_stars_far_size = 0.2
shader_parameter/large_stars_near_size = 0.3
shader_parameter/far_stars_color = Color(0.429114, 0.562963, 0.98865, 1)
shader_parameter/near_stars_color = Color(0.684341, 0.413522, 0.851235, 1)
shader_parameter/base_scroll_speed = -0.05
shader_parameter/additional_scroll_speed = -0.05

[node name="Espacio" type="Node2D"]
material = SubResource("ShaderMaterial_8rovt")
script = SubResource("GDScript_v66tu")

[node name="Ui" parent="." instance=ExtResource("2_3q3bj")]
z_index = 1
anchors_preset = 9
anchor_right = 0.0
grow_horizontal = 1

[node name="Bordes" type="StaticBody2D" parent="."]
position = Vector2(-9.99896, -15.9992)
scale = Vector2(1, 0.999999)
physics_material_override = SubResource("PhysicsMaterial_8crpi")

[node name="CollisionShape2D" type="CollisionShape2D" parent="Bordes"]
position = Vector2(8, -6)
shape = SubResource("SegmentShape2D_7piqt")

[node name="CollisionShape2D2" type="CollisionShape2D" parent="Bordes"]
position = Vector2(0, 13)
shape = SubResource("SegmentShape2D_ttjyk")

[node name="CollisionShape2D3" type="CollisionShape2D" parent="Bordes"]
position = Vector2(7, 1099)
shape = SubResource("SegmentShape2D_xaa5u")

[node name="CollisionShape2D4" type="CollisionShape2D" parent="Bordes"]
position = Vector2(1929, 15)
shape = SubResource("SegmentShape2D_epiip")

[node name="AudioStreamPlayer2D" type="AudioStreamPlayer2D" parent="."]
position = Vector2(969, 512)
stream = ExtResource("4_1a8vh")
volume_db = -10.306
autoplay = true
script = ExtResource("5_qrapf")

[node name="Jugador" parent="." instance=ExtResource("3_gs1vg")]
position = Vector2(968, 512)

[node name="ColorRect" type="ColorRect" parent="."]
z_index = -5
texture_filter = 4
material = SubResource("ShaderMaterial_6opc8")
offset_right = 1919.0
offset_bottom = 1080.0
color = Color(0.0726426, 0.0224512, 0.147543, 1)

[connection signal="finished" from="AudioStreamPlayer2D" to="AudioStreamPlayer2D" method="_on_finished"]
